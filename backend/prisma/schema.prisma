// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int     @id @default(autoincrement())
  name      String
  email     String  @unique
  password  String
  role      Role    @default(CUSTOMER)
  orders    Order[]
  cart      Cart[]

  createdAt DateTime @default(now())
}

model Product {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(255)
  description String  @db.Text
  price       Decimal @default(0.0) @db.Decimal(10,2)
  stock       Int     @default(0)
  imageUrl    String?
  category    String

  cartItems   CartItem[]
  orderItems  OrderItem[]

  createdAt   DateTime @default(now())
}


model Cart {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  items     CartItem[]

  createdAt DateTime @default(now())
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int      @default(1)

  createdAt DateTime @default(now())
}


model Order {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  totalPrice Float
  status     OrderStatus @default(PENDING)
  items      OrderItem[]
  payment    Payment?

  createdAt DateTime @default(now())
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  order     Order   @relation(fields: [orderId], references: [id])
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float

  createdAt DateTime @default(now())
}

model Payment {
  id            Int     @id @default(autoincrement())
  orderId       Int     @unique
  order         Order   @relation(fields: [orderId], references: [id])
  method        PaymentMethod
  status        PaymentStatus @default(PENDING)
  transactionId String?

  createdAt DateTime @default(now())
}

enum Role {
  CUSTOMER
  ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  VN_PAY
}