generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(CUSTOMER)
  phone     String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  cart      Cart?
  orders    Order[]
  passwordChangesReceived PasswordChangeLog[] @relation("UserPasswordChanges")
  passwordChangesMade     PasswordChangeLog[] @relation("AdminPasswordChanges")
  reviews   Review[]
  shippingAddresses ShippingAddress[]
  deliveryLogs DeliveryLog[]
  shipperOrders Order[] @relation("ShipperOrders")
  wishlist  Wishlist[]
  notifications Notification[]
  deliveryRatings DeliveryRating[]
  discountCodeUsages DiscountCodeUsage[]
  discountCodeClaims DiscountCodeClaim[]
  blacklistedTokens TokenBlacklist[]
  refreshTokens RefreshToken[]
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String      @db.VarChar(255)
  description String      @db.Text
  price       Decimal     @default(0.00) @db.Decimal(10, 2)
  promotionalPrice Decimal? @db.Decimal(10, 2)
  stock       Int         @default(0)
  imageUrl    String?
  categoryId  Int
  category    Category    @relation(fields: [categoryId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt @default(now())
  cartItems   CartItem[]  @relation("ProductToCartItem")
  orderItems  OrderItem[] @relation("ProductToOrderItem")
  reviews     Review[]
  wishlist    Wishlist[]

  sku         String?     @db.VarChar(50)
  barcode     String?     @db.VarChar(50)
  weight      Float?
  dimensions  String?
  material    String?
  origin      String?
  warranty    String?
  status      ProductStatus @default(ACTIVE)
  seoTitle    String?     @db.VarChar(70)
  seoDescription String?  @db.VarChar(320)
  seoUrl      String?     @unique
  isFeatured  Boolean     @default(false)
  isNew       Boolean     @default(false)
  isBestSeller Boolean    @default(false)
  rating      Float?      @default(0)
  reviewCount Int         @default(0)
  viewCount   Int         @default(0)
  soldCount   Int         @default(0)

  @@index([categoryId])
  @@index([sku])
  @@index([barcode])
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt @default(now())
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int      @default(1)
  price     Float    
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product  @relation("ProductToCartItem", fields: [productId], references: [id])

  @@index([cartId], map: "CartItem_cartId_fkey")
  @@index([productId], map: "CartItem_productId_fkey")
}

model Order {
  id              Int            @id @default(autoincrement())
  userId          Int
  totalPrice      Float
  status          OrderStatus    @default(PENDING)
  shippingAddress String
  shippingPhone   String
  shippingName    String
  note            String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  shipperId       Int?

  promotionCode   String?        // mã giảm giá đã áp dụng
  discount        Float?         // số tiền được giảm

  user            User           @relation(fields: [userId], references: [id])
  items           OrderItem[]
  payment         Payment?
  shipper         User?          @relation("ShipperOrders", fields: [shipperId], references: [id])
  deliveryLogs    DeliveryLog[]
  deliveryRating  DeliveryRating?

  @@index([userId])
  @@index([shipperId])
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation("ProductToOrderItem", fields: [productId], references: [id])

  @@index([orderId], map: "OrderItem_orderId_fkey")
  @@index([productId], map: "OrderItem_productId_fkey")
}

model Payment {
  id            Int           @id @default(autoincrement())
  orderId       Int           @unique
  method        PaymentMethod
  status        PaymentStatus @default(PENDING)
  amount        Float
  currency      String        @default("VND")
  transactionId String?
  paymentDate   DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  order         Order         @relation(fields: [orderId], references: [id])

  @@index([orderId])
}

model PasswordChangeLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  adminId   Int
  changedAt DateTime @default(now())
  user      User     @relation("UserPasswordChanges", fields: [userId], references: [id])
  admin     User     @relation("AdminPasswordChanges", fields: [adminId], references: [id])
}

model Review {
  id          Int      @id @default(autoincrement())
  userId      Int
  productId   Int
  rating      Int     
  comment     String?  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])
  product     Product  @relation(fields: [productId], references: [id])

  @@unique([userId, productId]) 
  @@index([productId])
  @@index([userId])
}

model ShippingAddress {
  id        Int      @id @default(autoincrement())
  userId    Int
  name      String
  phone     String
  address   String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], map: "ShippingAddress_userId_fkey")

  @@index([userId])
}

model DeliveryLog {
  id        Int      @id @default(autoincrement())
  orderId   Int
  deliveryId Int
  status    OrderStatus
  note      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order     Order @relation(fields: [orderId], references: [id])
  delivery  User  @relation(fields: [deliveryId], references: [id])

  @@index([orderId])
  @@index([deliveryId])
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
}

model Notification {
  id        String   @id @default(uuid())
  userId    Int
  message   String
  isRead    Boolean  @default(false)
  link      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model DeliveryRating {
  id        Int      @id @default(autoincrement())
  orderId   Int      @unique
  userId    Int
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order     Order    @relation(fields: [orderId], references: [id], onDelete: Restrict)
  user      User     @relation(fields: [userId], references: [id], onDelete: Restrict)

  @@index([userId])
}

enum Role {
  CUSTOMER
  ADMIN
  DELIVERY
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  VN_PAY
  COD
  BANK_TRANSFER
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
  COMING_SOON
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

model DiscountCode {
  id            Int          @id @default(autoincrement())
  code          String       @unique
  description   String
  discountType  DiscountType
  discountValue Float
  minOrderValue Float?
  maxDiscount   Float?
  startDate     DateTime
  endDate       DateTime
  usageLimit    Int?
  usedCount     Int         @default(0)
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  usages        DiscountCodeUsage[]
  claims        DiscountCodeClaim[]

  @@map("discount_codes")
}

model DiscountCodeUsage {
  id             Int           @id @default(autoincrement())
  userId         Int
  discountCodeId Int
  orderId        Int?
  usedAt         DateTime      @default(now())

  user           User          @relation(fields: [userId], references: [id])
  discountCode   DiscountCode  @relation(fields: [discountCodeId], references: [id])

  @@unique([userId, discountCodeId])
  @@index([discountCodeId])
}

model DiscountCodeClaim {
  id             Int           @id @default(autoincrement())
  userId         Int
  discountCodeId Int
  claimedAt      DateTime      @default(now())
  isUsed         Boolean       @default(false)

  user           User          @relation(fields: [userId], references: [id])
  discountCode   DiscountCode  @relation(fields: [discountCodeId], references: [id])

  @@unique([userId, discountCodeId])
  @@index([discountCodeId])
  @@index([userId])
}

model TokenBlacklist {
  id        Int      @id @default(autoincrement())
  token     String   @unique @db.VarChar(500)
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([expiresAt])
}

model RefreshToken {
  id          Int      @id @default(autoincrement())
  token       String   @unique @db.VarChar(500) // Có thể lưu hash nếu muốn
  userId      Int
  deviceInfo  String?
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  revoked     Boolean  @default(false)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}
