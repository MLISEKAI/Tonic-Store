import React, { useRef } from 'react';
import { Card, Steps, Typography, Row, Col, Space, Button, List, Alert } from 'antd';
import { 
  UserOutlined, 
  ShoppingCartOutlined, 
  CreditCardOutlined, 
  TruckOutlined,
  CheckCircleOutlined,
  QuestionCircleOutlined,
  MessageOutlined
} from '@ant-design/icons';
import { Link } from 'react-router-dom';
const { Title, Text, Paragraph } = Typography;

const HowToBuyPage: React.FC = () => {
  const contentRefs = useRef<(HTMLDivElement | null)[]>([]);
  const handleStepChange = (index: number) => {
    contentRefs.current[index]?.scrollIntoView({
      behavior: 'smooth',
      block: 'start',
    });
  };

  const steps = [
    {
      title: 'T·∫°o T√†i Kho·∫£n',
      description: 'ƒêƒÉng k√Ω t√†i kho·∫£n mi·ªÖn ph√≠',
      icon: <UserOutlined />,
      content: (
        <div>
          <Paragraph>
            ƒê·ªÉ mua h√†ng tr√™n Tonic Store, b·∫°n c·∫ßn t·∫°o m·ªôt t√†i kho·∫£n. Qu√° tr√¨nh n√†y r·∫•t ƒë∆°n gi·∫£n:
          </Paragraph>
          <List
            dataSource={[
              'Nh·∫•n n√∫t "ƒêƒÉng k√Ω" ·ªü g√≥c tr√™n b√™n ph·∫£i',
              'ƒêi·ªÅn th√¥ng tin: H·ªç t√™n, Email, S·ªë ƒëi·ªán tho·∫°i',
              'T·∫°o m·∫≠t kh·∫©u m·∫°nh',
              'X√°c nh·∫≠n email ƒë·ªÉ k√≠ch ho·∫°t t√†i kho·∫£n',
            ]}
            renderItem={(item) => (
              <List.Item>
                <CheckCircleOutlined className="text-green-500 mr-2" />
                {item}
              </List.Item>
            )}
          />
        </div>
      ),
    },
    {
      title: 'Ch·ªçn S·∫£n Ph·∫©m',
      description: 'T√¨m ki·∫øm v√† ch·ªçn s·∫£n ph·∫©m y√™u th√≠ch',
      icon: <ShoppingCartOutlined />,
      content: (
        <div>
          <Paragraph>
            T√¨m ki·∫øm s·∫£n ph·∫©m theo nhi·ªÅu c√°ch kh√°c nhau:
          </Paragraph>
          <Row gutter={[16, 16]}>
            <Col xs={24} sm={12}>
              <Card size="small">
                <Title level={5}>T√¨m ki·∫øm theo t√™n</Title>
                <Text>S·ª≠ d·ª•ng thanh t√¨m ki·∫øm ƒë·ªÉ t√¨m s·∫£n ph·∫©m theo t√™n</Text>
              </Card>
            </Col>
            <Col xs={24} sm={12}>
              <Card size="small">
                <Title level={5}>Duy·ªát theo danh m·ª•c</Title>
                <Text>Kh√°m ph√° s·∫£n ph·∫©m theo t·ª´ng danh m·ª•c</Text>
              </Card>
            </Col>
            <Col xs={24} sm={12}>
              <Card size="small">
                <Title level={5}>L·ªçc theo gi√°</Title>
                <Text>S·ª≠ d·ª•ng b·ªô l·ªçc ƒë·ªÉ t√¨m s·∫£n ph·∫©m trong kho·∫£ng gi√° mong mu·ªën</Text>
              </Card>
            </Col>
            <Col xs={24} sm={12}>
              <Card size="small">
                <Title level={5}>S·∫Øp x·∫øp</Title>
                <Text>S·∫Øp x·∫øp theo gi√°, ƒë√°nh gi√°, m·ªõi nh·∫•t</Text>
              </Card>
            </Col>
          </Row>
        </div>
      ),
    },
    {
      title: 'Th√™m V√†o Gi·ªè H√†ng',
      description: 'Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng',
      icon: <ShoppingCartOutlined />,
      content: (
        <div>
          <Paragraph>
            Khi ƒë√£ ch·ªçn ƒë∆∞·ª£c s·∫£n ph·∫©m ∆∞ng √Ω:
          </Paragraph>
          <List
            dataSource={[
              'Ch·ªçn size, m√†u s·∫Øc (n·∫øu c√≥)',
              'Ch·ªçn s·ªë l∆∞·ª£ng mu·ªën mua',
              'Nh·∫•n "Th√™m v√†o gi·ªè h√†ng"',
              'Ki·ªÉm tra gi·ªè h√†ng v√† ƒëi·ªÅu ch·ªânh n·∫øu c·∫ßn',
            ]}
            renderItem={(item) => (
              <List.Item>
                <CheckCircleOutlined className="text-green-500 mr-2" />
                {item}
              </List.Item>
            )}
          />
          <Alert
            message="M·∫πo"
            description="B·∫°n c√≥ th·ªÉ th√™m nhi·ªÅu s·∫£n ph·∫©m v√†o gi·ªè h√†ng v√† thanh to√°n c√πng l√∫c ƒë·ªÉ ti·∫øt ki·ªám ph√≠ v·∫≠n chuy·ªÉn."
            type="info"
            showIcon
            className="mt-4"
          />
        </div>
      ),
    },
    {
      title: 'Thanh To√°n',
      description: 'Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n',
      icon: <CreditCardOutlined />,
      content: (
        <div>
          <Paragraph>
            Tonic Store h·ªó tr·ª£ nhi·ªÅu ph∆∞∆°ng th·ª©c thanh to√°n:
          </Paragraph>
          <Row gutter={[16, 16]}>
            <Col xs={24} sm={8}>
              <Card size="small" className="text-center">
                <div className="text-2xl mb-2">üí≥</div>
                <Title level={5}>Thanh to√°n online</Title>
                <Text>VNPay, chuy·ªÉn kho·∫£n ng√¢n h√†ng</Text>
              </Card>
            </Col>
            <Col xs={24} sm={8}>
              <Card size="small" className="text-center">
                <div className="text-2xl mb-2">üí∞</div>
                <Title level={5}>COD</Title>
                <Text>Thanh to√°n khi nh·∫≠n h√†ng</Text>
              </Card>
            </Col>
            <Col xs={24} sm={8}>
              <Card size="small" className="text-center">
                <div className="text-2xl mb-2">üì±</div>
                <Title level={5}>V√≠ ƒëi·ªán t·ª≠</Title>
                <Text>MoMo, ZaloPay, ViettelPay</Text>
              </Card>
            </Col>
          </Row>
        </div>
      ),
    },
    {
      title: 'Nh·∫≠n H√†ng',
      description: 'Theo d√µi v√† nh·∫≠n h√†ng',
      icon: <TruckOutlined />,
      content: (
        <div>
          <Paragraph>
            Sau khi ƒë·∫∑t h√†ng th√†nh c√¥ng:
          </Paragraph>
          <List
            dataSource={[
              'Nh·∫≠n email x√°c nh·∫≠n ƒë∆°n h√†ng',
              'Theo d√µi tr·∫°ng th√°i ƒë∆°n h√†ng trong t√†i kho·∫£n',
              'Nh·∫≠n th√¥ng b√°o khi h√†ng ƒë∆∞·ª£c giao',
              'Ki·ªÉm tra h√†ng tr∆∞·ªõc khi thanh to√°n (COD)',
            ]}
            renderItem={(item) => (
              <List.Item>
                <CheckCircleOutlined className="text-green-500 mr-2" />
                {item}
              </List.Item>
            )}
          />
        </div>
      ),
    },
  ];

  const tips = [
    {
      title: 'Ki·ªÉm tra size tr∆∞·ªõc khi mua',
      description: 'S·ª≠ d·ª•ng b·∫£ng size h∆∞·ªõng d·∫´n ƒë·ªÉ ch·ªçn size ph√π h·ª£p',
      icon: 'üìè',
    },
    {
      title: 'ƒê·ªçc ƒë√°nh gi√° s·∫£n ph·∫©m',
      description: 'Xem ƒë√°nh gi√° t·ª´ kh√°ch h√†ng kh√°c ƒë·ªÉ c√≥ c√°i nh√¨n kh√°ch quan',
      icon: '‚≠ê',
    },
    {
      title: 'S·ª≠ d·ª•ng m√£ gi·∫£m gi√°',
      description: 'T√¨m v√† s·ª≠ d·ª•ng m√£ gi·∫£m gi√° ƒë·ªÉ ti·∫øt ki·ªám chi ph√≠',
      icon: 'üé´',
    },
    {
      title: 'Ch·ªçn ƒë·ªãa ch·ªâ giao h√†ng ch√≠nh x√°c',
      description: 'ƒê·∫£m b·∫£o ƒë·ªãa ch·ªâ giao h√†ng ch√≠nh x√°c ƒë·ªÉ tr√°nh th·∫•t l·∫°c',
      icon: 'üìç',
    },
  ];

  const faqs = [
    {
      question: 'T√¥i c√≥ th·ªÉ h·ªßy ƒë∆°n h√†ng kh√¥ng?',
      answer: 'C√≥, b·∫°n c√≥ th·ªÉ h·ªßy ƒë∆°n h√†ng trong v√≤ng 30 ph√∫t sau khi ƒë·∫∑t h√†ng. Sau th·ªùi gian n√†y, ƒë∆°n h√†ng s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω v√† kh√¥ng th·ªÉ h·ªßy.',
    },
    {
      question: 'L√†m th·∫ø n√†o ƒë·ªÉ ƒë·ªïi size s·∫£n ph·∫©m?',
      answer: 'B·∫°n c√≥ th·ªÉ y√™u c·∫ßu ƒë·ªïi size trong v√≤ng 7 ng√†y k·ªÉ t·ª´ khi nh·∫≠n h√†ng. Li√™n h·ªá hotline ƒë·ªÉ ƒë∆∞·ª£c h∆∞·ªõng d·∫´n chi ti·∫øt.',
    },
    {
      question: 'T√¥i c√≥ th·ªÉ mua h√†ng m√† kh√¥ng c·∫ßn t√†i kho·∫£n kh√¥ng?',
      answer: 'Kh√¥ng, b·∫°n c·∫ßn t·∫°o t√†i kho·∫£n ƒë·ªÉ mua h√†ng. ƒêi·ªÅu n√†y gi√∫p ch√∫ng t√¥i qu·∫£n l√Ω ƒë∆°n h√†ng v√† b·∫£o v·ªá th√¥ng tin c·ªßa b·∫°n.',
    },
    {
      question: 'Ph√≠ v·∫≠n chuy·ªÉn ƒë∆∞·ª£c t√≠nh nh∆∞ th·∫ø n√†o?',
      answer: 'Ph√≠ v·∫≠n chuy·ªÉn ƒë∆∞·ª£c t√≠nh d·ª±a tr√™n ƒë·ªãa ƒëi·ªÉm giao h√†ng v√† tr·ªçng l∆∞·ª£ng s·∫£n ph·∫©m. Mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn cho ƒë∆°n h√†ng t·ª´ 500.000ƒë.',
    },
  ];

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="max-w-4xl mx-auto">
        {/* Header */}
        <div className="text-center mb-12">
          <Title level={1} className="text-4xl font-bold text-gray-800 mb-4">
            H∆∞·ªõng D·∫´n Mua H√†ng
          </Title>
          <Paragraph className="text-lg text-gray-600">
            H∆∞·ªõng d·∫´n chi ti·∫øt t·ª´ng b∆∞·ªõc ƒë·ªÉ mua h√†ng tr√™n Tonic Store m·ªôt c√°ch d·ªÖ d√†ng v√† an to√†n
          </Paragraph>
        </div>

        {/* Steps */}
        <div className="mb-16">
          <Steps
            // current={current}
            direction="vertical"
            size="default"
            items={steps.map(step => ({
              title: step.title,
              description: step.description,
              icon: step.icon,
            }))}
            onChange={handleStepChange}
          />
          <div className="mt-8">
            {steps.map((step, index) => (
              <div
                key={index}
                ref={(el) => (contentRefs.current[index] = el)}
                className="mb-6 scroll-mt-[156px]"
              >
                <Card key={index} className="mb-6">
                  <Title level={3} className="mb-4">
                    B∆∞·ªõc {index + 1}: {step.title}
                  </Title>
                  {step.content}
                </Card>
              </div>
            ))}
          </div>
        </div>

        {/* Tips */}
        <div className="mb-16">
          <Title level={2} className="text-center mb-8">M·∫πo Mua H√†ng Th√¥ng Minh</Title>
          <Row gutter={[24, 24]}>
            {tips.map((tip, index) => (
              <Col xs={24} sm={12} key={index}>
                <Card className="h-full">
                  <div className="text-center">
                    <div className="text-4xl mb-4">{tip.icon}</div>
                    <Title level={4} className="mb-2">{tip.title}</Title>
                    <Paragraph className="text-gray-600">{tip.description}</Paragraph>
                  </div>
                </Card>
              </Col>
            ))}
          </Row>
        </div>

        {/* FAQ */}
        <div className="mb-16">
          <Title level={2} className="text-center mb-8">C√¢u H·ªèi Th∆∞·ªùng G·∫∑p</Title>
          <div className="space-y-4">
            {faqs.map((faq, index) => (
              <Card key={index}>
                <Title level={4} className="mb-2">
                  <QuestionCircleOutlined className="text-blue-500 mr-2" />
                  {faq.question}
                </Title>
                <Paragraph className="text-gray-700">{faq.answer}</Paragraph>
              </Card>
            ))}
          </div>
        </div>

        {/* CTA */}
        <div className="text-center">
          <Card className="bg-blue-50 border-blue-200">
            <Space direction="vertical" size="large">
              <Title level={3} className="text-blue-800">
                S·∫µn S√†ng Mua S·∫Øm?
              </Title>
              <Paragraph className="text-blue-700">
                B√¢y gi·ªù b·∫°n ƒë√£ bi·∫øt c√°ch mua h√†ng, h√£y kh√°m ph√° nh·ªØng s·∫£n ph·∫©m tuy·ªát v·ªùi c·ªßa ch√∫ng t√¥i
              </Paragraph>
              <Space>
                <Link to="/products">
                  <Button type="primary" size="large">
                    Xem S·∫£n Ph·∫©m
                  </Button>
                </Link>
                <Link to="/contact">
                  <Button size="large" icon={<MessageOutlined />}>
                    C·∫ßn H·ªó Tr·ª£?
                  </Button>
                </Link>
              </Space>
            </Space>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default HowToBuyPage;
