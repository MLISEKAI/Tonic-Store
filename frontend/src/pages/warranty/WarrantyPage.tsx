import React, { useState } from 'react';
import { Card, Typography, Row, Col, Button, Form, Input, Select, Upload, message, Steps, List, Alert, Space, Tag } from 'antd';
import { 
  ToolOutlined, 
  CheckCircleOutlined, 
  ClockCircleOutlined,
  FileTextOutlined,
  UploadOutlined,
  PhoneOutlined,
  MailOutlined,
  QuestionCircleOutlined
} from '@ant-design/icons';

const { Title, Text, Paragraph } = Typography;
const { TextArea } = Input;
const { Option } = Select;

const WarrantyPage: React.FC = () => {
  const [form] = Form.useForm();
  const [currentStep, setCurrentStep] = useState(0);

  const warrantySteps = [
    {
      title: 'Ki·ªÉm Tra B·∫£o H√†nh',
      description: 'X√°c nh·∫≠n s·∫£n ph·∫©m c√≤n trong th·ªùi h·∫°n b·∫£o h√†nh',
      icon: <CheckCircleOutlined />,
    },
    {
      title: 'ƒêi·ªÅn Th√¥ng Tin',
      description: 'Cung c·∫•p th√¥ng tin s·∫£n ph·∫©m v√† l·ªói g·∫∑p ph·∫£i',
      icon: <FileTextOutlined />,
    },
    {
      title: 'G·ª≠i Y√™u C·∫ßu',
      description: 'G·ª≠i y√™u c·∫ßu b·∫£o h√†nh v√† ch·ªù x√°c nh·∫≠n',
      icon: <UploadOutlined />,
    },
    {
      title: 'X·ª≠ L√Ω B·∫£o H√†nh',
      description: 'Ch√∫ng t√¥i s·∫Ω x·ª≠ l√Ω v√† li√™n h·ªá v·ªõi b·∫°n',
      icon: <ToolOutlined />,
    },
  ];

  const warrantyPolicies = [
    {
      category: 'Th·ªùi Trang',
      period: '6 th√°ng',
      coverage: 'L·ªói s·∫£n xu·∫•t, h∆∞ h·ªèng do ch·∫•t l∆∞·ª£ng',
      conditions: [
        'S·∫£n ph·∫©m c√≤n nguy√™n v·∫πn, ch∆∞a s·ª≠a ch·ªØa',
        'C√≥ h√≥a ƒë∆°n mua h√†ng h·ª£p l·ªá',
        'Kh√¥ng do t√°c ƒë·ªông t·ª´ b√™n ngo√†i',
        'Kh√¥ng do s·ª≠ d·ª•ng sai c√°ch',
      ],
    },
    {
      category: 'ƒêi·ªán T·ª≠',
      period: '12 th√°ng',
      coverage: 'L·ªói k·ªπ thu·∫≠t, h∆∞ h·ªèng ph·∫ßn c·ª©ng',
      conditions: [
        'S·∫£n ph·∫©m c√≤n nguy√™n v·∫πn, ch∆∞a m·ªü m√°y',
        'C√≥ tem b·∫£o h√†nh v√† h√≥a ƒë∆°n',
        'Kh√¥ng do va ƒë·∫≠p, n∆∞·ªõc v√†o',
        'Kh√¥ng do s·ª≠ d·ª•ng sai ƒëi·ªán √°p',
      ],
    },
    {
      category: 'Ph·ª• Ki·ªán',
      period: '3 th√°ng',
      coverage: 'L·ªói s·∫£n xu·∫•t, h∆∞ h·ªèng do ch·∫•t l∆∞·ª£ng',
      conditions: [
        'S·∫£n ph·∫©m c√≤n nguy√™n v·∫πn',
        'C√≥ h√≥a ƒë∆°n mua h√†ng',
        'Kh√¥ng do t√°c ƒë·ªông c∆° h·ªçc',
        'Kh√¥ng do s·ª≠ d·ª•ng sai m·ª•c ƒë√≠ch',
      ],
    },
  ];

  const warrantyTypes = [
    {
      type: 'S·ª≠a ch·ªØa',
      description: 'S·ª≠a ch·ªØa s·∫£n ph·∫©m b·ªã l·ªói',
      time: '7-14 ng√†y',
      cost: 'Mi·ªÖn ph√≠',
    },
    {
      type: 'ƒê·ªïi m·ªõi',
      description: 'ƒê·ªïi s·∫£n ph·∫©m m·ªõi t∆∞∆°ng ƒë∆∞∆°ng',
      time: '3-5 ng√†y',
      cost: 'Mi·ªÖn ph√≠',
    },
    {
      type: 'Ho√†n ti·ªÅn',
      description: 'Ho√†n ti·ªÅn n·∫øu kh√¥ng th·ªÉ s·ª≠a ch·ªØa',
      time: '5-7 ng√†y',
      cost: 'Mi·ªÖn ph√≠',
    },
  ];

  const faqs = [
    {
      question: 'S·∫£n ph·∫©m c·ªßa t√¥i c√≥ ƒë∆∞·ª£c b·∫£o h√†nh kh√¥ng?',
      answer: 'T·∫•t c·∫£ s·∫£n ph·∫©m ch√≠nh h√£ng ƒë·ªÅu ƒë∆∞·ª£c b·∫£o h√†nh theo ch√≠nh s√°ch c·ªßa nh√† s·∫£n xu·∫•t. Th·ªùi gian b·∫£o h√†nh t√πy thu·ªôc v√†o lo·∫°i s·∫£n ph·∫©m.',
    },
    {
      question: 'L√†m th·∫ø n√†o ƒë·ªÉ ki·ªÉm tra t√¨nh tr·∫°ng b·∫£o h√†nh?',
      answer: 'B·∫°n c√≥ th·ªÉ ki·ªÉm tra t√¨nh tr·∫°ng b·∫£o h√†nh b·∫±ng c√°ch nh·∫≠p m√£ s·∫£n ph·∫©m ho·∫∑c s·ªë IMEI tr√™n website c·ªßa ch√∫ng t√¥i.',
    },
    {
      question: 'Chi ph√≠ b·∫£o h√†nh l√† bao nhi√™u?',
      answer: 'B·∫£o h√†nh ho√†n to√†n mi·ªÖn ph√≠ n·∫øu s·∫£n ph·∫©m c√≤n trong th·ªùi h·∫°n b·∫£o h√†nh v√† ƒë√°p ·ª©ng c√°c ƒëi·ªÅu ki·ªán b·∫£o h√†nh.',
    },
    {
      question: 'Th·ªùi gian x·ª≠ l√Ω b·∫£o h√†nh l√† bao l√¢u?',
      answer: 'Th·ªùi gian x·ª≠ l√Ω b·∫£o h√†nh t·ª´ 7-14 ng√†y t√πy thu·ªôc v√†o lo·∫°i s·∫£n ph·∫©m v√† t√¨nh tr·∫°ng h∆∞ h·ªèng.',
    },
  ];

  const handleSubmit = async (values: any) => {
    try {
      console.log('Warranty request submitted:', values);
      message.success('Y√™u c·∫ßu b·∫£o h√†nh ƒë√£ ƒë∆∞·ª£c g·ª≠i! Ch√∫ng t√¥i s·∫Ω li√™n h·ªá l·∫°i trong v√≤ng 24h.');
      form.resetFields();
      setCurrentStep(0);
    } catch (error) {
      message.error('C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.');
    }
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <div className="text-center mb-12">
          <Title level={1} className="text-4xl font-bold text-gray-800 mb-4">
            Ch√≠nh S√°ch B·∫£o H√†nh
          </Title>
          <Paragraph className="text-lg text-gray-600">
            Cam k·∫øt b·∫£o h√†nh s·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng v√† d·ªãch v·ª• h·ªó tr·ª£ t·∫≠n t√¨nh
          </Paragraph>
        </div>

        {/* Warranty Process */}
        <div className="mb-16">
          <Title level={2} className="text-center mb-8">Quy Tr√¨nh B·∫£o H√†nh</Title>
          <Steps
            current={currentStep}
            items={warrantySteps.map(step => ({
              title: step.title,
              description: step.description,
              icon: step.icon,
            }))}
            className="mb-8"
          />
        </div>

        {/* Warranty Policies */}
        <div className="mb-16">
          <Title level={2} className="text-center mb-8">Ch√≠nh S√°ch B·∫£o H√†nh Theo Danh M·ª•c</Title>
          <Row gutter={[24, 24]}>
            {warrantyPolicies.map((policy, index) => (
              <Col xs={24} md={8} key={index}>
                <Card className="h-full">
                  <Title level={3} className="text-center mb-4">{policy.category}</Title>
                  <div className="text-center mb-4">
                    <Tag color="blue" className="text-lg px-4 py-2">
                      {policy.period}
                    </Tag>
                  </div>
                  <Paragraph className="text-center mb-4">
                    <Text strong>{policy.coverage}</Text>
                  </Paragraph>
                  <Title level={5} className="mb-3">ƒêi·ªÅu ki·ªán b·∫£o h√†nh:</Title>
                  <List
                    size="small"
                    dataSource={policy.conditions}
                    renderItem={(condition) => (
                      <List.Item>
                        <CheckCircleOutlined className="text-green-500 mr-2" />
                        {condition}
                      </List.Item>
                    )}
                  />
                </Card>
              </Col>
            ))}
          </Row>
        </div>

        {/* Warranty Types */}
        <div className="mb-16">
          <Title level={2} className="text-center mb-8">Lo·∫°i H√¨nh B·∫£o H√†nh</Title>
          <Row gutter={[24, 24]}>
            {warrantyTypes.map((type, index) => (
              <Col xs={24} md={8} key={index}>
                <Card className="text-center h-full">
                  <div className="text-4xl mb-4">üîß</div>
                  <Title level={4} className="mb-2">{type.type}</Title>
                  <Paragraph className="text-gray-600 mb-4">{type.description}</Paragraph>
                  <div className="space-y-2">
                    <div>
                      <Text strong>Th·ªùi gian: </Text>
                      <Text>{type.time}</Text>
                    </div>
                    <div>
                      <Text strong>Chi ph√≠: </Text>
                      <Text className="text-green-600">{type.cost}</Text>
                    </div>
                  </div>
                </Card>
              </Col>
            ))}
          </Row>
        </div>

        {/* Warranty Request Form */}
        <div className="mb-16">
          <Title level={2} className="text-center mb-8">Y√™u C·∫ßu B·∫£o H√†nh</Title>
          <Card className="max-w-2xl mx-auto">
            <Form
              form={form}
              layout="vertical"
              onFinish={handleSubmit}
            >
              <Row gutter={16}>
                <Col xs={24} sm={12}>
                  <Form.Item
                    name="orderNumber"
                    label="M√£ ƒë∆°n h√†ng"
                    rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p m√£ ƒë∆°n h√†ng' }]}
                  >
                    <Input placeholder="VD: TONIC2024001" />
                  </Form.Item>
                </Col>
                <Col xs={24} sm={12}>
                  <Form.Item
                    name="productCode"
                    label="M√£ s·∫£n ph·∫©m"
                    rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p m√£ s·∫£n ph·∫©m' }]}
                  >
                    <Input placeholder="M√£ s·∫£n ph·∫©m" />
                  </Form.Item>
                </Col>
              </Row>

              <Form.Item
                name="issueType"
                label="Lo·∫°i l·ªói"
                rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn lo·∫°i l·ªói' }]}
              >
                <Select placeholder="Ch·ªçn lo·∫°i l·ªói g·∫∑p ph·∫£i">
                  <Option value="hardware">L·ªói ph·∫ßn c·ª©ng</Option>
                  <Option value="software">L·ªói ph·∫ßn m·ªÅm</Option>
                  <Option value="cosmetic">L·ªói th·∫©m m·ªπ</Option>
                  <Option value="other">Kh√°c</Option>
                </Select>
              </Form.Item>

              <Form.Item
                name="description"
                label="M√¥ t·∫£ chi ti·∫øt l·ªói"
                rules={[
                  { required: true, message: 'Vui l√≤ng m√¥ t·∫£ chi ti·∫øt l·ªói' },
                  { min: 10, message: 'M√¥ t·∫£ ph·∫£i c√≥ √≠t nh·∫•t 10 k√Ω t·ª±' },
                ]}
              >
                <TextArea
                  rows={4}
                  placeholder="M√¥ t·∫£ chi ti·∫øt v·ªÅ l·ªói g·∫∑p ph·∫£i..."
                />
              </Form.Item>

              <Form.Item
                name="images"
                label="H√¨nh ·∫£nh minh ch·ª©ng"
                extra="T·∫£i l√™n h√¨nh ·∫£nh s·∫£n ph·∫©m b·ªã l·ªói ƒë·ªÉ ch√∫ng t√¥i c√≥ th·ªÉ h·ªó tr·ª£ t·ªët h∆°n"
              >
                <Upload
                  listType="picture-card"
                  maxCount={5}
                  beforeUpload={() => false}
                >
                  <div>
                    <UploadOutlined />
                    <div style={{ marginTop: 8 }}>T·∫£i l√™n</div>
                  </div>
                </Upload>
              </Form.Item>

              <Form.Item>
                <Button type="primary" htmlType="submit" size="large" block>
                  G·ª≠i Y√™u C·∫ßu B·∫£o H√†nh
                </Button>
              </Form.Item>
            </Form>
          </Card>
        </div>

        {/* FAQ */}
        <div className="mb-16">
          <Title level={2} className="text-center mb-8">C√¢u H·ªèi Th∆∞·ªùng G·∫∑p</Title>
          <div className="space-y-4">
            {faqs.map((faq, index) => (
              <Card key={index}>
                <Title level={4} className="mb-2">
                  <QuestionCircleOutlined className="text-blue-500 mr-2" />
                  {faq.question}
                </Title>
                <Paragraph className="text-gray-700">{faq.answer}</Paragraph>
              </Card>
            ))}
          </div>
        </div>

        {/* Contact Support */}
        <div className="text-center">
          <Card className="bg-blue-50 border-blue-200">
            <Space direction="vertical" size="large">
              <Title level={3} className="text-blue-800">
                C·∫ßn H·ªó Tr·ª£ Th√™m?
              </Title>
              <Paragraph className="text-blue-700">
                ƒê·ªôi ng≈© h·ªó tr·ª£ b·∫£o h√†nh c·ªßa ch√∫ng t√¥i lu√¥n s·∫µn s√†ng gi√∫p ƒë·ª° b·∫°n
              </Paragraph>
              <Space size="large">
                <Button type="primary" size="large" icon={<PhoneOutlined />}>
                  1900 1234
                </Button>
                <Button size="large" icon={<MailOutlined />}>
                  warranty@tonicstore.com
                </Button>
              </Space>
            </Space>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default WarrantyPage;
