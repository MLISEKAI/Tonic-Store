version: '3.8'

services:
  server-fe:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    env_file:
      - ./frontend/.env
    environment:
      - NODE_ENV=production
    ports:
      - "80"
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  server-be:
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - ./backend/.env
    environment:
      - NODE_ENV=production
      - FRONTEND_URL=http://3.107.78.154
      - ADMIN_URL=http://3.107.78.154:3001
    command: yarn start:prod
    ports:
      - "8085"
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
  server-fe-admin:
    build:
      context: ./admin
      dockerfile: Dockerfile
    env_file:
      - ./admin/.env
    environment:
      - NODE_ENV=production
    ports:
      - "80"
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  db:
    image: mysql:8.0
    container_name: tonic-store
    restart: unless-stopped
    ports:
      - "3306:3306"
    env_file:
      - ./backend/.env
    environment:
      TZ: Asia/Vietnam
      MYSQL_INITDB_SKIP_TZINFO: 1
    volumes:
      - ./docker/db/data:/var/lib/mysql
      - ./docker/db/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s
    networks:
      - app-network

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - app-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    networks:
      - app-network
    restart: unless-stopped
    depends_on:
      - prometheus

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    networks:
      - app-network
    restart: unless-stopped

  nginx-proxy:
    image: nginx:latest
    container_name: nginx-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - ./docker/nginx/certs:/etc/letsencrypt
      - ./docker/nginx/html:/var/www/certbot
      - ./docker/nginx/logs:/var/log/nginx
    depends_on:
      - server-fe
      - server-fe-admin
      - server-be
    networks:
      - app-network

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./docker/nginx/certs:/etc/letsencrypt
      - ./docker/nginx/html:/var/www/certbot
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  prometheus_data:
  grafana_data:

